{"version":3,"sources":["StateProvider.js","App.styles.js","GlobalStyles.js","components/footer/Footer.styles.js","components/footer/Footer.js","components/header/Header.styles.js","components/header/Header.js","factories/ShipFactory.js","factories/GameboardFactory.js","factories/PlayerFactory.js","components/game_window/Initialization.styles.js","components/game_window/Initialization.js","components/game_window/ContentContainer.styles.js","components/game_window/ShipPlacementGameboard.styles.js","components/game_window/ShipPlacementGameboard.js","components/game_window/StatusMessage.styles.js","components/game_window/StatusMessage.js","components/game_window/Game.styles.js","components/game_window/Setup.styles.js","components/game_window/Setup.js","components/game_window/EnemyWatersGameboard.styles.js","components/game_window/EnemyWatersGameboard.js","components/game_window/FriendlyWatersGameboard.styles.js","components/game_window/FriendlyWatersGameboard.js","components/game_window/Game.js","components/game_window/ContentContainer.js","App.js","reportWebVitals.js","index.js"],"names":["store","createContext","Provider","StateProvider","children","useReducer","reducer","gameWindow","players","turn","statusMessage","statusMessageColor","state","dispatch","value","action","type","payload","Error","AppContainer","styled","div","GlobalStyles","createGlobalStyle","GameboardContainer","GameboardGrid","Button","button","FooterContainer","footer","FooterText","p","Footer","HeaderContainer","header","HeaderTitle","h1","Header","Ship","gridPositionsOccupied","shipSectors","forEach","gridPosition","push","xCoord","yCoord","hit","length","registerHit","shipSector","isSunk","some","GameboardFactory","xAxis","gameboardArray","ships","shipTypes","shipPresent","isAttacked","sunkShipPresent","isShipWithinBoundaries","shipType","orientation","find","ship","coordinatesOccupiedByShip","coordinates","i","isShipAlreadyPresent","occupiedGrids","shipIsPresent","occupiedGrid","grid","placeShip","coordinatesOccupied","coordinate","ShipFactory","getRandomNumber","max","min","Math","floor","random","shipIsSunk","filter","map","receiveAttack","gridAttacked","shipAttacked","shipsStillActive","randomizeShipPlacement","axis","PlayerFactory","name","gameboard","isGridAttacked","attack","cpuGameboard","aiAttack","playerGameboard","unattackedGrids","damagedGrids","potentialShipGrids","damagedGrid","possibleTargets","farRightCoordinate","farBottomCoordinate","console","log","filteredPossibleTargets","target","soloTargetChoices","filteredSoloTargetChoices","Form","form","Label","label","Input","input","SubmitButton","Initialization","useState","setName","useContext","onSubmit","e","preventDefault","playerName","player","cpu","htmlFor","onChange","toUpperCase","ContentContainer","Content","Gameboard","Grid","props","gridOccupied","gridSelected","ShipPlacementGameboard","handleOnClick","handleOnTouch","handleOnMouseEnter","checkIfSelected","index","CSSTransition","appear","in","timeout","classNames","onClick","onTouchStart","onTouchEnd","onMouseEnter","MessageTextContainer","MessageText","h2","StatusMessage","TransitionGroup","component","GameContainer","GameboardsContainer","EnemyWatersContainer","FriendlyWatersContainer","EnemyWatersHeading","FriendlyWatersHeading","SetupContainer","ToggleOrientationButton","Setup","setOrientation","selectedGrids","setSelectedGrids","setShips","previouslyTouchedGrid","setPreviouslyTouchedGrid","currentShip","setTimeout","isWithinBoundaries","isGridOccupied","shipsCopy","shift","getSelectedGrids","currentShipLength","selected","handleChangeOrientation","useEffect","handleSpacebarKeyPress","keyCode","window","addEventListener","removeEventListener","selectedGrid","playerTurn","gridIsAttacked","gridMiss","gridHit","gridSunk","EnemyWatersGameboard","handleGridOnClick","disabled","FriendlyWatersGameboard","Game","attackedCoords","attackedGrid","handleCpuAttack","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAEMA,EAAQC,0BACNC,EAAaF,EAAbE,SAEFC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SASvB,EAA0BC,qBAAWC,EARhB,CACnBC,WAAY,iBACZC,QAAS,GACTC,KAAM,GACNC,cAAe,OACfC,mBAAoB,eAGtB,mBAAOC,EAAP,KAAcC,EAAd,KAEA,OAAO,cAACX,EAAD,CAAUY,MAAO,CAAEF,QAAOC,YAA1B,SAAuCT,KAG1CE,EAAU,SAACM,EAAOG,GACtB,IAAQC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACd,OAAQD,GACN,IAAK,cACH,OAAO,2BACFJ,GADL,IAEEJ,QAASS,IAEb,IAAK,iBACH,OAAO,2BACFL,GADL,IAEEL,WAAYU,IAEhB,IAAK,WACH,OAAO,2BACFL,GADL,IAEEH,KAAMQ,IAER,IAAK,qBACL,OAAO,2BACFL,GADL,IAEEF,cAAeO,IAEjB,IAAK,2BACL,OAAO,2BACFL,GADL,IAEED,mBAAoBM,IAExB,QACE,MAAM,IAAIC,MAAM,uB,OC9CTC,EAAeC,IAAOC,IAAV,8EAAGD,CAAH,8L,QCAZE,EAAeC,YAAH,qIAUZC,EAAqBJ,IAAOC,IAAV,uFAAGD,CAAH,uEAMlBK,EAAgBL,IAAOC,IAAV,kFAAGD,CAAH,wFAQbM,EAASN,IAAOO,OAAV,2EAAGP,CAAH,6XCxBNQ,EAAkBR,IAAOS,OAAV,oFAAGT,CAAH,6DAMfU,EAAaV,IAAOW,EAAV,+EAAGX,CAAH,2GCIRY,EARA,WACb,OACE,cAAC,EAAD,UACE,cAAC,EAAD,iDCLOC,EAAkBb,IAAOc,OAAV,oFAAGd,CAAH,6DAMfe,EAAcf,IAAOgB,GAAV,gFAAGhB,CAAH,ySCITiB,EARA,WACb,OACE,cAAC,EAAD,UACE,cAAC,EAAD,4BCgCSC,EAvCF,SAACtB,EAAMuB,GAClB,IAAIC,EAAc,GAGlBD,EAAsBE,SAAQ,SAACC,GAC7BF,EAAYG,KAAK,CACfC,OAAQF,EAAaE,OACrBC,OAAQH,EAAaG,OACrBC,KAAK,OAsBT,MAAO,CACL9B,OACAwB,cACAO,OAAQP,EAAYO,OACpBC,YArBkB,SAACJ,EAAQC,GAC3BL,EAAYC,SAAQ,SAACQ,GACfA,EAAWL,SAAWA,GAAUK,EAAWJ,SAAWA,IACxDI,EAAWH,KAAM,OAmBrBI,OAba,WACb,OAAIV,EAAYW,MAAK,SAACF,GAAD,OAAmC,IAAnBA,EAAWH,UCoLrCM,EAzMU,WACvB,IAAMC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEpCC,EAAiB,GACjBC,EAAQ,GAGRC,EAAY,CAChB,CAAExC,KAAM,UAAW+B,OAAQ,GAC3B,CAAE/B,KAAM,aAAc+B,OAAQ,GAC9B,CAAE/B,KAAM,YAAa+B,OAAQ,GAC7B,CAAE/B,KAAM,YAAa+B,OAAQ,GAC7B,CAAE/B,KAAM,aAAc+B,OAAQ,IAVlB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAcpCN,SAAQ,SAACI,GAAD,OACZQ,EAAMZ,SAAQ,SAACG,GAAD,OACZU,EAAeX,KAAK,CAClBC,SACAC,SACAY,aAAa,EACbC,YAAY,EACZC,iBAAiB,UAMvB,IAAMC,EAAyB,SAACC,EAAUjB,EAAQC,EAAQiB,GACxD,MAAoB,UAAhBA,IAEAjB,EAAS,GACTA,EAAS,IACTW,EAAUO,MAAK,SAACC,GAAD,OAAUA,EAAKhD,OAAS6C,KAAUd,OAASH,EAAS,IAM5C,UAAhBkB,IAEPlB,EAAS,GACTA,EAAS,IACTY,EAAUO,MAAK,SAACC,GAAD,OAAUA,EAAKhD,OAAS6C,KAAUd,OAASF,EAAS,SAJhE,GAcHoB,EAA4B,SAACJ,EAAUjB,EAAQC,EAAQiB,GAC3D,IAAMI,EAAc,GACpB,GAAoB,UAAhBJ,EACF,IACE,IAAIK,EAAIvB,EACRuB,EAAIvB,EAASY,EAAUO,MAAK,SAACC,GAAD,OAAUA,EAAKhD,OAAS6C,KAAUd,OAC9DoB,GAAK,EAELD,EAAYvB,KAAK,CAAEC,OAAQuB,EAAGtB,gBAE3B,GAAoB,UAAhBiB,EACT,IACE,IAAIK,EAAItB,EACRsB,EAAItB,EAASW,EAAUO,MAAK,SAACC,GAAD,OAAUA,EAAKhD,OAAS6C,KAAUd,OAC9DoB,GAAK,EAELD,EAAYvB,KAAK,CAAEC,SAAQC,OAAQsB,IAGvC,OAAOD,GAIHE,EAAuB,SAACP,EAAUjB,EAAQC,EAAQiB,GAEtD,IAAMO,EAAgBJ,EACpBJ,EACAjB,EACAC,EACAiB,GAEEQ,GAAgB,EAepB,OAZAD,EAAc5B,SAAQ,SAAC8B,IAMD,IAJlBjB,EAAeS,MACb,SAACS,GAAD,OACEA,EAAK5B,SAAW2B,EAAa3B,QAC7B4B,EAAK3B,SAAW0B,EAAa1B,UAC/BY,cAEFa,GAAgB,MAIbA,GAIHG,EAAY,SAACZ,EAAUjB,EAAQC,EAAQiB,GAC3C,IAAMY,EAAsBT,EAC1BJ,EACAjB,EACAC,EACAiB,GAGFY,EAAoBjC,SAAQ,SAACkC,GAC3BrB,EAAeS,MACb,SAACS,GAAD,OACEA,EAAK5B,SAAW+B,EAAW/B,QAAU4B,EAAK3B,SAAW8B,EAAW9B,UAClEY,YAAcI,KAGlB,IAAMG,EAAOY,EAAYf,EAAUa,GACnCnB,EAAMZ,KAAKqB,IAIPa,EAAkB,SAACC,EAAKC,GAC5B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMC,GAAOA,IAoD5CI,EAAa,SAACnB,GAClBV,EACG8B,QAAO,SAACZ,GAAD,OAAUA,EAAKf,cAAgBO,EAAKhD,QAC3CqE,KAAI,SAACb,GAAD,OAAWA,EAAKb,iBAAkB,MAQ3C,MAAO,CACLL,iBACAE,YACAD,QACA+B,cAxCoB,SAAC1C,EAAQC,GAE7B,IAAM0C,EAAejC,EAAeS,MAClC,SAACS,GAAD,OAAUA,EAAK5B,SAAWA,GAAU4B,EAAK3B,SAAWA,KAItD,IAAgC,IAA5B0C,EAAa7B,aACf6B,EAAa7B,YAAa,GAEO,IAA7B6B,EAAa9B,aAAuB,CACtC,IAAM+B,EAAejC,EAAMQ,MACzB,SAACC,GAAD,OAAUA,EAAKhD,OAASuE,EAAa9B,eAGvC+B,EAAaxC,YAAYJ,EAAQC,GAE7B2C,EAAatC,UACfiC,EAAWK,KAuBjBf,YACAgB,iBAVuB,WACvB,OAAOlC,EAAMJ,MAAK,SAACa,GAAD,OAA4B,IAAlBA,EAAKd,aAUjCU,yBACAQ,uBACAsB,uBApE6B,WAC7B,IAAMC,EAAO,CAAC,QAAS,SACvBnC,EAAUf,SAAQ,SAACuB,GACjB,IAAIpB,EACAC,EACAiB,EAGJ,GACElB,EAASiC,EAAgB,EAAG,IAC5BhC,EAASgC,EAAgB,EAAG,IAC5Bf,EAAc6B,EAAKd,EAAgB,EAAG,WAGpC,IADFjB,EAAuBI,EAAKhD,KAAM4B,EAAQC,EAAQiB,KAEe,IAAjEM,EAAqBJ,EAAKhD,KAAM4B,EAAQC,EAAQiB,IAGlDW,EAAUT,EAAKhD,KAAM4B,EAAQC,EAAQiB,SC4D5B8B,EA/MO,SAACC,GAGrB,IAAMC,EAAY1C,IAeZyB,EAAkB,SAACE,EAAKD,GAC5B,OAAOE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMC,GAAOA,IAG5CgB,EAAiB,SAACnD,EAAQC,EAAQiD,GAItC,OAHqBA,EAAUxC,eAAeS,MAC5C,SAACS,GAAD,OAAUA,EAAK5B,SAAWA,GAAU4B,EAAK3B,SAAWA,KAElCa,YA6KtB,MAAO,CACLmC,OACAC,YACAE,OApMa,SAACpD,EAAQC,EAAQoD,IAKX,IAFjBA,EAAa3C,eAAeS,MAC1B,SAACS,GAAD,OAAUA,EAAK5B,SAAWA,GAAU4B,EAAK3B,SAAWA,KACpDa,YAGFuC,EAAaX,cAAc1C,EAAQC,IA6LrCqD,SA9Ke,SAACC,GAEhB,IAAMC,EAAkB,GAElBC,EAAe,GAGrBF,EAAgB7C,eAAeb,SAAQ,SAAC+B,IACd,IAApBA,EAAKd,WACP0C,EAAgBzD,KAAK6B,GAEjBA,EAAKf,cAAwC,IAAzBe,EAAKb,iBAC3B0C,EAAa1D,KAAK6B,MAMxB,IAAI8B,EAAqB,GAIzBD,EAAa5D,SAAQ,SAAC8D,GAElBF,EAAalD,MACX,SAACqB,GAAD,OACGA,EAAK5B,SAAW2D,EAAY3D,OAAS,GACpC4B,EAAK3B,SAAW0D,EAAY1D,QAC7B2B,EAAK5B,SAAW2D,EAAY3D,OAAS,GACpC4B,EAAK3B,SAAW0D,EAAY1D,QAC7B2B,EAAK5B,SAAW2D,EAAY3D,QAC3B4B,EAAK3B,SAAW0D,EAAY1D,OAAS,GACtC2B,EAAK5B,SAAW2D,EAAY3D,QAC3B4B,EAAK3B,SAAW0D,EAAY1D,OAAS,MAG3CyD,EAAmB3D,KAAK4D,MAI5B,IAAMC,EAAkB,GAExB,GAAIF,EAAmBvD,OAAS,EAAG,CACjC,IAAM4C,EACJW,EAAmB,GAAG1D,SAAW0D,EAAmB,GAAG1D,OACnD,QACA,QAEN,GAAa,UAAT+C,EAAkB,CAEhBW,EAAmB,GAAG1D,OAAS,GACjC4D,EAAgB7D,KAAK,CACnBC,OAAQ0D,EAAmB,GAAG1D,OAAS,EACvCC,OAAQyD,EAAmB,GAAGzD,SAIlC,IAAI4D,EAAqB,EACzBH,EAAmB7D,SAAQ,SAAC+B,GACtBA,EAAK5B,OAAS6D,IAChBA,EAAqBjC,EAAK5B,WAI1B6D,EAAqB,IACvBD,EAAgB7D,KAAK,CACnBC,OAAQ6D,EAAqB,EAC7B5D,OAAQyD,EAAmB,GAAGzD,cAG7B,GAAa,UAAT8C,EAAkB,CAEvBW,EAAmB,GAAGzD,OAAS,GACjC2D,EAAgB7D,KAAK,CACnBC,OAAQ0D,EAAmB,GAAG1D,OAC9BC,OAAQyD,EAAmB,GAAGzD,OAAS,IAI3C,IAAI6D,EAAsB,EAC1BJ,EAAmB7D,SAAQ,SAAC+B,GACtBA,EAAK3B,OAAS6D,IAChBA,EAAsBlC,EAAK3B,WAI3B6D,EAAsB,IACxBF,EAAgB7D,KAAK,CACnBC,OAAQ0D,EAAmB,GAAG1D,OAC9BC,OAAQ6D,EAAsB,IAGlCC,QAAQC,IAAIJ,IAMhB,IA8CM5D,EACAC,EA/CAgE,EAA0BL,EAAgBpB,QAC9C,SAAC0B,GAAD,OAImB,IAHjBX,EAAgB7C,eAAeS,MAC7B,SAACS,GAAD,OACEA,EAAK5B,SAAWkE,EAAOlE,QAAU4B,EAAK3B,SAAWiE,EAAOjE,UAC1Da,cAGN,GAAImD,EAAwB9D,OAAS,EAKnC,OAJAoD,EAAgBb,cACduB,EAAwB,GAAGjE,OAC3BiE,EAAwB,GAAGhE,QAEtB,CACLD,OAAQiE,EAAwB,GAAGjE,OACnCC,OAAQgE,EAAwB,GAAGhE,QAEhC,GAAIwD,EAAatD,OAAS,EAAG,CAClC,IAAMgE,EAAoB,CACxB,CAAEnE,OAAQyD,EAAa,GAAGzD,OAAS,EAAGC,OAAQwD,EAAa,GAAGxD,QAC9D,CAAED,OAAQyD,EAAa,GAAGzD,OAAS,EAAGC,OAAQwD,EAAa,GAAGxD,QAC9D,CAAED,OAAQyD,EAAa,GAAGzD,OAAQC,OAAQwD,EAAa,GAAGxD,OAAS,GACnE,CAAED,OAAQyD,EAAa,GAAGzD,OAAQC,OAAQwD,EAAa,GAAGxD,OAAS,IAG/DmE,EAA4B,GAElCD,EAAkBtE,SAAQ,SAACqE,GACrBA,EAAOlE,OAAS,GAAKkE,EAAOlE,OAAS,IACnCkE,EAAOjE,OAAS,GAAKiE,EAAOjE,OAAS,KAKpB,IAHjBsD,EAAgB7C,eAAeS,MAC7B,SAACS,GAAD,OACEA,EAAK5B,SAAWkE,EAAOlE,QAAU4B,EAAK3B,SAAWiE,EAAOjE,UAC1Da,YAEFsD,EAA0BrE,KAAKmE,MAKvC,IAAIlE,EAASoE,EAA0B,GAAGpE,OACtCC,EAASmE,EAA0B,GAAGnE,OAE1C,OADAsD,EAAgBb,cAAc1C,EAAQC,GAC/B,CAAED,SAAQC,UAKjB,GACED,EAASiC,EAAgB,EAAG,IAC5BhC,EAASgC,EAAgB,EAAG,WAC+B,IAApDkB,EAAenD,EAAQC,EAAQsD,IAGxC,OADAA,EAAgBb,cAAc1C,EAAQC,GAC/B,CAAED,SAAQC,aCrLVoE,EAAO7F,IAAO8F,KAAV,iFAAG9F,CAAH,mQAeJ+F,EAAQ/F,IAAOgG,MAAV,kFAAGhG,CAAH,2GAQLiG,EAAQjG,IAAOkG,MAAV,kFAAGlG,CAAH,waA4BLmG,EAAenG,YAAOM,GAAV,yFAAGN,CAAH,eCjDZoG,EAAiB,WAC5B,MAAwBC,mBAAS,IAAjC,mBAAO5B,EAAP,KAAa6B,EAAb,KACQ7G,EAAa8G,qBAAW3H,GAAxBa,SAwBR,OACE,eAAC,EAAD,CAAa+G,SAnBM,SAACC,GAEpBA,EAAEC,iBAGF,IAAIC,EAAalC,EACE,KAAfkC,IACFA,EAAa,WAIf,IAAMC,EAASpC,EAAcmC,GACvBE,EAAMrC,EAAc,OAE1B/E,EAAS,CAAEG,KAAM,cAAeC,QAAS,CAAE+G,SAAQC,SACnDpH,EAAS,CAAEG,KAAM,iBAAkBC,QAAS,WAI5C,UACE,cAAC,EAAD,CAAciH,QAAQ,OAAtB,gCACA,cAAC,EAAD,CACElH,KAAK,OACLmH,SA3Be,SAACN,GACpBH,EAAQG,EAAEf,OAAOhG,MAAMsH,gBA2BnBtH,MAAO+E,IAET,cAAC,EAAD,CAAqB7E,KAAK,SAA1B,4BCrCOqH,EAAmBjH,IAAOC,IAAV,2FAAGD,CAAH,+CAMhBkH,EAAUlH,IAAOC,IAAV,kFAAGD,CAAH,sf,gBCAPmH,EAAYnH,YAAOI,GAAV,8FAAGJ,CAAH,8DAcToH,EAAOpH,YAAOK,GAAV,yFAAGL,CAAH,+iBACL,SAACqH,GAAD,OAAYA,EAAMC,aAAe,cAAgB,aAEhD,SAACD,GAAD,OAAmC,IAAvBA,EAAMC,aAAwB,MAAQ,QAClD,SAACD,GAAD,OAAmC,IAAvBA,EAAME,aAAwB,MAAQ,QAClD,SAACF,GAAD,OACc,IAAvBA,EAAMC,eAAgD,IAAvBD,EAAME,aAAwB,MAAQ,QAEzD,SAACF,GAAD,OAAmC,IAAvBA,EAAME,aAAwB,QAAU,QACpD,SAACF,GAAD,OAAmC,IAAvBA,EAAMC,aAAwB,UAAY,QACtD,SAACD,GAAD,OACW,IAAvBA,EAAMC,eAAgD,IAAvBD,EAAME,aACjC,WACA,QCGOC,EAjCgB,SAACH,GAE9B,IAAQI,EAAsEJ,EAAtEI,cAAeC,EAAuDL,EAAvDK,cAAeC,EAAwCN,EAAxCM,mBAAoBC,EAAoBP,EAApBO,gBAC1D,EAA4BrB,qBAAW3H,GAA/BY,EAAR,EAAQA,MACFuF,GADN,EAAetF,SACSD,EAAMJ,QAAQwH,OAAOlC,WAG7C,OACI,cAAC,EAAD,UACGK,EAAgB7C,eAAe+B,KAAI,SAACb,EAAMyE,GAAP,OAClC,cAACC,EAAA,EAAD,CAEEC,QAAQ,EACRC,IAAyB,IAArB5E,EAAKf,YAET4F,QAAS,IACTC,WAAW,kBANb,SAQE,cAAC,EAAD,CAEEC,QAAS,kBAAMV,EAAcrE,IAC7BgF,aAAc,kBAAMV,EAActE,IAClCiF,WAAY,SAAC5B,GAAD,OAAOA,EAAEC,kBACrB4B,aAAc,kBAAMX,EAAmBvE,IACvCkE,cAAmC,IAArBlE,EAAKf,aAA+B,KAClDkF,eAAcK,EAAgBxE,IAAe,MANxCyE,IARFA,SCdJU,EAAuBvI,IAAOC,IAAV,gGAAGD,CAAH,0FAQpBwI,EAAcxI,IAAOyI,GAAV,uFAAGzI,CAAH,qiBAOf,SAACqH,GAAD,OAAYA,EAAM9H,sB,QCQZmJ,EApBO,WACpB,MAA4BnC,qBAAW3H,GAA/BY,EAAR,EAAQA,MAAR,EAAeC,SAEf,OACE,cAAC,EAAD,UACE,cAACkJ,EAAA,EAAD,CAAiBC,UAAW,KAA5B,SACE,cAACd,EAAA,EAAD,CAEEG,QAAS,IACTC,WAAW,kBAHb,SAKE,cAAC,EAAD,CAAoB3I,mBAAoBC,EAAMD,mBAA9C,SACGC,EAAMF,iBALJE,EAAMF,oBCVRuJ,EAAgB7I,IAAOC,IAAV,gFAAGD,CAAH,qGAQb8I,EAAsB9I,IAAOC,IAAV,sFAAGD,CAAH,8JAYnB+I,EAAuB/I,IAAOC,IAAV,uFAAGD,CAAH,oQAqBpBgJ,EAA0BhJ,YAAO+I,GAAV,0FAAG/I,CAAH,MAGvBiJ,EAAqBjJ,IAAOyI,GAAV,qFAAGzI,CAAH,2FAOlBkJ,EAAwBlJ,YAAOiJ,GAAV,wFAAGjJ,CAAH,MAErBuI,EAAuBvI,IAAOyI,GAAV,uFAAGzI,CAAH,uEAOpBwI,GAAcxI,IAAOyI,GAAV,8EAAGzI,CAAH,wgBAKb,SAACqH,GAAD,OAAYA,EAAM9H,sBC9DhB4J,GAAiBnJ,IAAOC,IAAV,kFAAGD,CAAH,qGAQdoJ,GAA0BpJ,YAAOM,GAAV,2FAAGN,CAAH,MC+PrBqJ,ID7P0BrJ,YAAOuI,GAAV,6FAAGvI,CAAH,MAENA,YAAOwI,IAAV,oFAAGxI,CAAH,kBCXf,WACZ,MAA4BuG,qBAAW3H,GAA/BY,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACTsF,EAAkBvF,EAAMJ,QAAQwH,OAAOlC,UACvCG,EAAerF,EAAMJ,QAAQyH,IAAInC,UACvC,EAAsC2B,mBAAS,SAA/C,mBAAO3D,EAAP,KAAoB4G,EAApB,KACA,EAA0CjD,mBAAS,IAAnD,mBAAOkD,EAAP,KAAsBC,EAAtB,KAEA,EAA0BnD,mBAAStB,EAAgB3C,WAAnD,mBAAOD,EAAP,KAAcsH,EAAd,KAEA,EAA0DpD,mBAAS,CACjE7E,OAAQ,KACRC,OAAQ,OAFV,mBAAOiI,EAAP,KAA8BC,EAA9B,KA2EMlC,EAAgB,SAAC,GAAwB,IAAtBjG,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAC/B,GAAIU,EAAMR,OAAQ,CAEhB,IAAMiI,EAAczH,EAAM,GAAGvC,KAG7B,IAA+C,IA5ExB,SAAC,GAAwB,IAAtB4B,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACpC,QACGsD,EAAgBvC,uBACfL,EAAM,GAAGvC,KACT4B,EACAC,EACAiB,KAGqClD,EAAMF,cAAoCE,EAAMD,mBACvFE,EAAS,CACPG,KAAM,qBACNC,QAAQ,kBAEVJ,EAAS,CACPG,KAAM,2BACNC,QAAQ,WAEVgK,YAAY,WACVpK,EAAS,CACPG,KAAM,qBACNC,QAAQ,cAAD,OAAgBsC,EAAM,GAAGvC,KAAKoH,iBAEvCvH,EAAS,CACPG,KAAM,2BACNC,QAAS,iBAEX,MACK,GAgDHiK,CAAoB,CAACtI,SAAQC,WAC/B,OACK,IAOkC,IAnDtB,SAAC,GAAuB,IAArBD,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,OAEhC,IAMQ,IALNsD,EAAgB/B,qBACdb,EAAM,GAAGvC,KACT4B,EACAC,EACAiB,GAqBA,OAnBuClD,EAAMF,cAAoCE,EAAMD,mBACvFE,EAAS,CACPG,KAAM,qBACNC,QAAQ,yBAEVJ,EAAS,CACPG,KAAM,2BACNC,QAAQ,WAEVgK,YAAY,WACVpK,EAAS,CACPG,KAAM,qBACNC,QAAQ,cAAD,OAAgBsC,EAAM,GAAGvC,KAAKoH,iBAEvCvH,EAAS,CACPG,KAAM,2BACNC,QAAS,iBAEX,MACK,EAEP,OAAO,EAqBPkK,CAAgB,CAACvI,SAAQC,WAGzB,OAGAsD,EAAgB1B,UAAUuG,EAAapI,EAAQC,EAAQiB,GAGvD,IAAMsH,EAAS,YAAO7H,GACtB6H,EAAUC,QACVR,EAASO,KAsETE,EAAmB,SAAC,GAAwB,IAAtB1I,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAC5B0I,EAAoBhI,EAAM,GAAGR,OAC7ByI,EAAW,GACjB,GAAoB,UAAhB1H,EACF,IAAK,IAAIK,EAAI,EAAGA,EAAIoH,EAAmBpH,IACrCqH,EAAS7I,KAAK,CAAEC,OAAQA,EAASuB,EAAGtB,gBAEjC,GAAoB,UAAhBiB,EACT,IAAK,IAAIK,EAAI,EAAGA,EAAIoH,EAAmBpH,IACrCqH,EAAS7I,KAAK,CAAEC,OAAQA,EAAQC,OAAQA,EAASsB,IAGrD,OAAOqH,GAmBHC,EAA0B,WAO9Bf,EALoB,UAAhB5G,EACe,QAEA,UA8BrB,OAxBA4H,qBAAU,WACJnI,EAAMR,OAAS,EACjBlC,EAAS,CACPG,KAAM,qBACNC,QAAQ,cAAD,OAAgBsC,EAAM,GAAGvC,KAAKoH,iBA7GpC7E,EAAMR,SACTkD,EAAaP,yBACbuF,YAAW,WACTpK,EAAS,CACPG,KAAM,qBACNC,QAAQ,uBAEVgK,YAAW,WACTpK,EAAS,CACPG,KAAM,qBACNC,QAAQ,uBAEVgK,YAAW,WACTpK,EAAS,CACPG,KAAM,qBACNC,QAAQ,yBAET,OACF,OACF,GAEHgK,YAAW,WACTpK,EAAS,CAAEG,KAAM,iBAAkBC,QAAS,SAC5CJ,EAAS,CAAEG,KAAM,WAAYC,QAAS,aACrC,QA0FJ,CAACJ,EAAU0C,IAGdmI,qBAAU,WACR,SAASC,EAAuB9D,GACZ,KAAdA,EAAE+D,SACJH,IAIJ,OADAI,OAAOC,iBAAiB,QAASH,GAC1B,WACLE,OAAOE,oBAAoB,QAASJ,OAKtC,eAAC,GAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CACE9C,cAAeA,EACfC,cAzGgB,SAACtE,GAErB,GAAKjB,EAAMR,OAIT,GACEyB,EAAK5B,SAAWkI,EAAsBlI,QACtC4B,EAAK3B,SAAWiI,EAAsBjI,OAEtCgG,EAAcrE,OACT,CAEL,IAAMmG,EAAgBW,EAAiB9G,GACvCoG,EAAiBD,GACjBI,EAAyBvG,GACzB3D,EAAS,CACPG,KAAM,qBACNC,QAAQ,6BAAD,OAA+BsC,EAAM,GAAGvC,KAAKoH,cAA7C,iBAwFTW,mBAlFqB,SAACvE,GAC1B,GAAKjB,EAAMR,OAAX,CAGE,IAAM4H,EAAgBW,EAAiB9G,GACvCoG,EAAiBD,KA8Ef3B,gBAzDkB,SAACxE,GACvB,QACEmG,EAAcxH,MACZ,SAAC6I,GAAD,OACEA,EAAapJ,SAAW4B,EAAK5B,QAC7BoJ,EAAanJ,SAAW2B,EAAK3B,aAsDjC,cAAC,GAAD,CAAgC0G,QAAS,kBAAMkC,KAA/C,SACmB,UAAhB3H,EAA0B,oBAAsB,2BC9P5CyE,GAAYnH,YAAOI,GAAV,wFAAGJ,CAAH,6BAKToH,GAAOpH,YAAOK,GAAV,mFAAGL,CAAH,wkBACG,SAAAqH,GAAK,OAAIA,EAAMwD,WAAa,KAAO,UAC3C,SAACxD,GAAD,OAAYA,EAAMyD,eAAiB,cAAgB,eAEzC,SAACzD,GAAD,OAAYA,EAAM0D,SAAW,iBAAmB,QAChD,SAAC1D,GAAD,OAAYA,EAAM2D,QAAU,MAAQ,QACpC,SAAC3D,GAAD,OAAYA,EAAM4D,SAAW,SAAW,QACjD,SAAC5D,GAAD,OACTA,EAAM0D,UAAY1D,EAAM2D,SAAW3D,EAAM4D,SACrC,OACA,QAKO,SAAC5D,GAAD,OAAYA,EAAMyD,eAAiB,KAAO,SCmB1CI,GA1Cc,SAAC7D,GAC5B,MAA4Bd,qBAAW3H,GAA/BY,EAAR,EAAQA,MACFqF,GADN,EAAepF,SACMD,EAAMJ,QAAQyH,IAAInC,WAE/ByG,EAAsB9D,EAAtB8D,kBAER,OACE,cAAC,GAAD,UACGtG,EAAa3C,eAAe+B,KAAI,SAACb,EAAMyE,GAAP,OAC/B,cAACC,EAAA,EAAD,CAEEC,QAAQ,EACRC,GAAI5E,EAAKd,WAET2F,QAAS,IACTC,WAAW,kBANb,SAQE,cAAC,GAAD,CAEEZ,cAAmC,IAArBlE,EAAKf,aAA+B,KAClD0I,UACuB,IAArB3H,EAAKf,cAA6C,IAApBe,EAAKd,YAE/B,KAEN0I,SACuB,IAArB5H,EAAKf,cAA6C,IAApBe,EAAKd,YAE/B,KAEN2I,WAAU7H,EAAKb,gBACfuI,iBAAgB1H,EAAKd,WACrB6F,QAAS,kBAAMgD,EAAkB/H,IACjCyH,WAA2B,WAAfrL,EAAMH,KAClB+L,WAAUhI,EAAKd,YAAoB,MAhB9BuF,IARFA,SCPFV,GAAYnH,YAAOI,GAAV,2FAAGJ,CAAH,6BAKToH,GAAOpH,YAAOK,GAAV,sFAAGL,CAAH,qlBACK,SAACqH,GAAD,OAAYA,EAAMC,aAAe,UAAY,QAC7C,SAACD,GAAD,OAAYA,EAAM0D,SAAW,iBAAmB,QAChD,SAAC1D,GAAD,OAAYA,EAAM2D,QAAU,MAAQ,QACpC,SAAC3D,GAAD,OAAYA,EAAM4D,SAAW,SAAW,QACjD,SAAC5D,GAAD,OACTA,EAAMC,cAAgBD,EAAM0D,UAAY1D,EAAM2D,SAAW3D,EAAM4D,SAC3D,MACA,QAkBgB,SAAC5D,GAAD,OAAYA,EAAM2D,QAAU,SAAW,QACvC,SAAC3D,GAAD,OAAYA,EAAM0D,SAAW,iBAAmB,QCHzDM,GAhCiB,WAC9B,MAA4B9E,qBAAW3H,GAA/BY,EAAR,EAAQA,MACFuF,GADN,EAAetF,SACSD,EAAMJ,QAAQwH,OAAOlC,WAE7C,OACE,cAAC,GAAD,UACGK,EAAgB7C,eAAe+B,KAAI,SAACb,EAAMyE,GAAP,OAClC,cAACC,EAAA,EAAD,CAEEC,QAAQ,EACRC,GAAI5E,EAAKd,WAET2F,QAAS,IACTC,WAAW,kBANb,SAQA,cAAC,GAAD,CAEEZ,cAAmC,IAArBlE,EAAKf,aAA+B,KAClD0I,UACuB,IAArB3H,EAAKf,cAA6C,IAApBe,EAAKd,YAA6B,KAElE0I,SACuB,IAArB5H,EAAKf,cAA6C,IAApBe,EAAKd,YAA6B,KAElE2I,WAAU7H,EAAKb,iBARVsF,IARAA,SC+JAyD,GApKF,WACX,MAA4B/E,qBAAW3H,GAA/BY,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACTmH,EAASpH,EAAMJ,QAAQwH,OACvBC,EAAMrH,EAAMJ,QAAQyH,IA4I1B,OAjDAyD,qBAAU,WACW,QAAf9K,EAAMH,KACJwH,EAAInC,UAAUL,qBAChB5E,EAAS,CACPG,KAAM,qBACNC,QAAQ,qBAEVJ,EAAS,CACPG,KAAM,2BACNC,QAAQ,UAEVgK,YAAW,YAtDO,WACtB,IAAM0B,EAAiB1E,EAAI/B,SAAS8B,EAAOlC,WAErC8G,EAAe5E,EAAOlC,UAAUxC,eAAeS,MACnD,SAACS,GAAD,OACEA,EAAK5B,SAAW+J,EAAe/J,QAC/B4B,EAAK3B,SAAW8J,EAAe9J,UAG/B+J,EAAanJ,YACXmJ,EAAajJ,iBACf9C,EAAS,CACPG,KAAM,qBACNC,QAAQ,iBAAD,OAAmB2L,EAAanJ,YAAY2E,iBAErDvH,EAAS,CACPG,KAAM,2BACNC,QAAQ,cAGVJ,EAAS,CACPG,KAAM,qBACNC,QAAQ,gBAAD,OAAkB2L,EAAanJ,YAAY2E,iBAEpDvH,EAAS,CACPG,KAAM,2BACNC,QAAQ,YAIZJ,EAAS,CAAEG,KAAM,qBAAsBC,QAAQ,eAG7C+G,EAAOlC,UAAUL,mBAEnBwF,YAAW,WACTpK,EAAS,CAAEG,KAAM,WAAYC,QAAS,aACrC,KAEHJ,EAAS,CAAEG,KAAM,qBAAsBC,QAAQ,aAgB3C4L,KAMC,OAEmB,WAAfjM,EAAMH,OACfI,EAAS,CACPG,KAAM,qBACNC,QAAQ,GAAD,OAAK+G,EAAOnC,KAAKuC,cAAjB,uBAETvH,EAAS,CACPG,KAAM,2BACNC,QAAQ,aAGX,CAACL,EAAMH,OAoBR,eAAC,EAAD,WACE,cAAC,EAAD,IACA,eAAC,EAAD,WACE,eAAC,EAAD,WACE,cAAC,GAAD,CACE8L,kBAhJgB,SAAChH,GACzByC,EAAOhC,OAAOT,EAAa3C,OAAQ2C,EAAa1C,OAAQoF,EAAInC,WAE5D,IAAM8G,EAAe3E,EAAInC,UAAUxC,eAAeS,MAChD,SAACS,GAAD,OACEe,EAAa3C,SAAW4B,EAAK5B,QAC7B2C,EAAa1C,SAAW2B,EAAK3B,UAG7B+J,EAAanJ,aACXmJ,EAAajJ,iBACf9C,EAAS,CACPG,KAAM,qBACNC,QAAQ,wBAAD,OAA0B2L,EAAanJ,YAAY2E,iBAE5DvH,EAAS,CACPG,KAAM,2BACNC,QAAQ,cAGVJ,EAAS,CACPG,KAAM,qBACNC,QAAQ,0BAEVJ,EAAS,CACPG,KAAM,2BACNC,QAAQ,YAGZJ,EAAS,CAAEG,KAAM,WAAYC,QAAS,SAEtCJ,EAAS,CAAEG,KAAM,qBAAsBC,QAAQ,eAC/CJ,EAAS,CAAEG,KAAM,WAAYC,QAAS,QAIpCgH,EAAInC,UAAUL,mBAEhBwF,YAAW,WACTpK,EAAS,CAAEG,KAAM,WAAYC,QAAS,UACrC,KAEHJ,EAAS,CAAEG,KAAM,qBAAsBC,QAAQ,eAwG3C,cAAC,EAAD,8BAEF,eAAC,EAAD,WACE,cAAC,GAAD,IACA,cAAC,EAAD,wCC9HKoH,GA7BU,WACvB,IAEsB9H,EAFdK,EAAU+G,qBAAW3H,GAArBY,MAYR,OACE,cAAC,EAAD,UACE,cAACmJ,EAAA,EAAD,CAAiBC,UAAW,KAA5B,SACE,cAACd,EAAA,EAAD,CAEEC,QAAQ,EACRE,QAAS,IACTC,WAAW,kBAJb,SAME,cAAC,EAAD,WAnBc/I,EAmBgBK,EAAML,WAlBvB,mBAAfA,EACK,cAAC,EAAD,IACiB,UAAfA,EACF,cAAC,GAAD,IACiB,SAAfA,EACF,cAAC,GAAD,SADF,MASIK,EAAML,iBCJNuM,OAbf,WACE,OACE,cAAC,EAAD,UACE,eAAC,EAAD,CAAqBC,UAAU,MAA/B,UACE,cAACzL,EAAD,IACA,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,EAAD,UCHO0L,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,GAAD,MAEAC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.1cc72d77.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\r\n\r\nconst store = createContext();\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const initialState = {\r\n    gameWindow: 'initialization',\r\n    players: [],\r\n    turn: '',\r\n    statusMessage: 'test',\r\n    statusMessageColor: 'whitesmoke'\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case 'SET_PLAYERS':\r\n      return {\r\n        ...state,\r\n        players: payload,\r\n      };\r\n    case 'SET_GAMEWINDOW':\r\n      return {\r\n        ...state,\r\n        gameWindow: payload,\r\n      };\r\n    case 'SET_TURN':\r\n      return {\r\n        ...state,\r\n        turn: payload,\r\n      };\r\n      case 'SET_STATUS_MESSAGE': \r\n      return {\r\n        ...state,\r\n        statusMessage: payload,\r\n      };\r\n      case 'SET_STATUS_MESSAGE_COLOR':\r\n      return {\r\n        ...state,\r\n        statusMessageColor: payload,\r\n      }\r\n    default:\r\n      throw new Error('Unexpected Action');\r\n  }\r\n};\r\n\r\nexport { store, StateProvider };\r\n","import styled from 'styled-components/macro'\r\n\r\nexport const AppContainer = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: space-around;\r\nbackground-image: linear-gradient( 105.3deg,  rgba(30,39,107,1) 21.8%, rgba(77,118,221,1) 100.2% );\r\nwidth: 100vw;\r\nheight: 100vh;\r\n`","import styled, { createGlobalStyle } from 'styled-components/macro';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n\r\n*, *::before, *::after {\r\n  box-sizing: inherit;\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n`;\r\n\r\nexport const GameboardContainer = styled.div`\r\ndisplay: grid;\r\ngrid-gap: 5px;\r\ngrid-template-columns: repeat( 10, 1fr );\r\n`\r\n\r\nexport const GameboardGrid = styled.div`\r\nborder: black 1px solid;\r\nheight: auto;\r\nwidth: auto;\r\nbackground-color: black;\r\nopacity: 0.25;\r\n/* background-color: ${props => props.gridColor}; */\r\n`\r\nexport const Button = styled.button`\r\n  font-family: 'Cairo', sans-serif;\r\n  letter-spacing: 0.3rem;\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n\tpadding: 5px 25px;\r\n\tcolor: black;\r\n  box-shadow: 0 0 15px 5px transparent;\r\n\tborder: 1px solid transparent;\r\n  border-radius: 0.5rem;\r\n\tbackground: darkorange;\r\n  transition: all 0.3s ease-in-out;\r\n  cursor: pointer;\r\n\r\n&:hover {\r\n\tbackground: none;\r\n  color: whitesmoke;\r\n\tbox-shadow: 0 0px 20px 5px darkorange;\r\n\tborder: 1px solid darkorange;\r\n}\r\n`\r\n\r\n\r\n\r\n// export default GlobalStyles;","import styled from 'styled-components/macro'\r\n\r\nexport const FooterContainer = styled.footer`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const FooterText = styled.p`\r\n  color: whitesmoke;\r\n  font-family: 'Cairo', sans-serif;\r\n  font-weight: 300;\r\n  letter-spacing: 0.3rem;\r\n  font-size: 12px;\r\n  `","import React from 'react'\r\nimport * as Styled from './Footer.styles';\r\n\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Styled.FooterContainer>\r\n      <Styled.FooterText>CREATED BY DOUGLAS COLACO, 2021</Styled.FooterText>\r\n    </Styled.FooterContainer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import styled from 'styled-components/macro'\r\n\r\nexport const HeaderContainer = styled.header`\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: center;\r\n`\r\n\r\nexport const HeaderTitle = styled.h1`\r\n  color: darkorange;\r\n  font-family: 'Black Ops One', cursive;\r\n  letter-spacing: 0.1em;\r\n  font-weight: 400;\r\n  font-size: 72px;\r\n\r\n  @media only screen and (min-device-width: 480px) and (max-device-width: 720px) {\r\n  font-size: 10vw;\r\n}\r\n\r\n@media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\r\n  font-size: 48px;\r\n}\r\n`\r\n\r\n","import React from 'react'\r\nimport * as Styled from './Header.styles';\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Styled.HeaderContainer>\r\n      <Styled.HeaderTitle>BATTLESHIP</Styled.HeaderTitle>\r\n    </Styled.HeaderContainer>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","const Ship = (type, gridPositionsOccupied) => {\r\n  let shipSectors = [];\r\n\r\n  //initialize ship sectors array which will contain details for each sector of the ship\r\n  gridPositionsOccupied.forEach((gridPosition) => {\r\n    shipSectors.push({\r\n      xCoord: gridPosition.xCoord,\r\n      yCoord: gridPosition.yCoord,\r\n      hit: false,\r\n    });\r\n  });\r\n\r\n  //method to register a hit given coordinates as arguments\r\n  const registerHit = (xCoord, yCoord) => {\r\n    shipSectors.forEach((shipSector) => {\r\n      if (shipSector.xCoord === xCoord && shipSector.yCoord === yCoord) {\r\n        shipSector.hit = true;\r\n      }\r\n    });\r\n  };\r\n\r\n  //Check if ship is not sunk if at least one sector is not hit. return true if sunk.\r\n  const isSunk = () => {\r\n    if (shipSectors.some((shipSector) => shipSector.hit === false)) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  return {\r\n    type,\r\n    shipSectors,\r\n    length: shipSectors.length,\r\n    registerHit,\r\n    isSunk,\r\n  };\r\n};\r\n\r\nexport default Ship;\r\n","import ShipFactory from './ShipFactory';\r\n\r\nconst GameboardFactory = () => {\r\n  const xAxis = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  const yAxis = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  const gameboardArray = [];\r\n  const ships = [];\r\n\r\n  //Array with ship information\r\n  const shipTypes = [\r\n    { type: 'carrier', length: 5 },\r\n    { type: 'battleship', length: 4 },\r\n    { type: 'destroyer', length: 3 },\r\n    { type: 'submarine', length: 3 },\r\n    { type: 'patrolBoat', length: 2 },\r\n  ];\r\n\r\n  //Initialize gameboardArray with grid status and details\r\n  yAxis.forEach((yCoord) =>\r\n    xAxis.forEach((xCoord) =>\r\n      gameboardArray.push({\r\n        xCoord,\r\n        yCoord,\r\n        shipPresent: false,\r\n        isAttacked: false,\r\n        sunkShipPresent: false,\r\n      })\r\n    )\r\n  );\r\n\r\n  //Check if ship is within gameboard boundaries given type and starting coordinates\r\n  const isShipWithinBoundaries = (shipType, xCoord, yCoord, orientation) => {\r\n    if (orientation === 'xAxis') {\r\n      if (\r\n        yCoord < 1 ||\r\n        yCoord > 10 ||\r\n        shipTypes.find((ship) => ship.type === shipType).length + xCoord > 11\r\n      ) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    } else if (orientation === 'yAxis') {\r\n      if (\r\n        xCoord < 1 ||\r\n        xCoord > 10 ||\r\n        shipTypes.find((ship) => ship.type === shipType).length + yCoord > 11\r\n      ) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  //Return coordinates that will be occupied by ship of given type and starting coordinates\r\n  const coordinatesOccupiedByShip = (shipType, xCoord, yCoord, orientation) => {\r\n    const coordinates = [];\r\n    if (orientation === 'xAxis') {\r\n      for (\r\n        let i = xCoord;\r\n        i < xCoord + shipTypes.find((ship) => ship.type === shipType).length;\r\n        i += 1\r\n      ) {\r\n        coordinates.push({ xCoord: i, yCoord });\r\n      }\r\n    } else if (orientation === 'yAxis') {\r\n      for (\r\n        let i = yCoord;\r\n        i < yCoord + shipTypes.find((ship) => ship.type === shipType).length;\r\n        i += 1\r\n      ) {\r\n        coordinates.push({ xCoord, yCoord: i });\r\n      }\r\n    }\r\n    return coordinates;\r\n  };\r\n\r\n  //Check if if ship is already present on coordinates new ship will be placed on. Return true if ship is already present on grids.\r\n  const isShipAlreadyPresent = (shipType, xCoord, yCoord, orientation) => {\r\n    //Check what coordinates the ship will occupy\r\n    const occupiedGrids = coordinatesOccupiedByShip(\r\n      shipType,\r\n      xCoord,\r\n      yCoord,\r\n      orientation\r\n    );\r\n    let shipIsPresent = false;\r\n\r\n    //Check if the coordinates already contain a ship\r\n    occupiedGrids.forEach((occupiedGrid) => {\r\n      if (\r\n        gameboardArray.find(\r\n          (grid) =>\r\n            grid.xCoord === occupiedGrid.xCoord &&\r\n            grid.yCoord === occupiedGrid.yCoord\r\n        ).shipPresent !== false\r\n      ) {\r\n        shipIsPresent = true;\r\n      }\r\n    });\r\n\r\n    return shipIsPresent;\r\n  };\r\n\r\n  //Place ship with given arguments of ship type, starting coordinates and orientation\r\n  const placeShip = (shipType, xCoord, yCoord, orientation) => {\r\n    const coordinatesOccupied = coordinatesOccupiedByShip(\r\n      shipType,\r\n      xCoord,\r\n      yCoord,\r\n      orientation\r\n    );\r\n\r\n    coordinatesOccupied.forEach((coordinate) => {\r\n      gameboardArray.find(\r\n        (grid) =>\r\n          grid.xCoord === coordinate.xCoord && grid.yCoord === coordinate.yCoord\r\n      ).shipPresent = shipType;\r\n    });\r\n\r\n    const ship = ShipFactory(shipType, coordinatesOccupied);\r\n    ships.push(ship);\r\n  };\r\n\r\n  //Random number generator\r\n  const getRandomNumber = (max, min) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n  };\r\n\r\n  //Randomize all ship placements for CPU gameboard\r\n  const randomizeShipPlacement = () => {\r\n    const axis = ['xAxis', 'yAxis'];\r\n    shipTypes.forEach((ship) => {\r\n      let xCoord;\r\n      let yCoord;\r\n      let orientation;\r\n\r\n      //Continue to generate random coordinates and axis if coordinates and axis generated already containes another ship, or is not within the boundaries\r\n      do {\r\n        xCoord = getRandomNumber(1, 11);\r\n        yCoord = getRandomNumber(1, 11);\r\n        orientation = axis[getRandomNumber(0, 2)];\r\n      } while (\r\n        isShipWithinBoundaries(ship.type, xCoord, yCoord, orientation) ===\r\n          false ||\r\n        isShipAlreadyPresent(ship.type, xCoord, yCoord, orientation) === true\r\n      );\r\n\r\n      placeShip(ship.type, xCoord, yCoord, orientation);\r\n    });\r\n  };\r\n\r\n  //Place an attack on the gameboard given coordinates as arguments\r\n  const receiveAttack = (xCoord, yCoord) => {\r\n    //find the grid on the gameboard\r\n    const gridAttacked = gameboardArray.find(\r\n      (grid) => grid.xCoord === xCoord && grid.yCoord === yCoord\r\n    );\r\n\r\n    //perform attack if grid is not already attacked\r\n    if (gridAttacked.isAttacked === false) {\r\n      gridAttacked.isAttacked = true;\r\n      //check if ship is present on attacked grid and return ship object if present\r\n      if (gridAttacked.shipPresent !== false) {\r\n        const shipAttacked = ships.find(\r\n          (ship) => ship.type === gridAttacked.shipPresent\r\n        );\r\n        //register a hit on the ship object\r\n        shipAttacked.registerHit(xCoord, yCoord);\r\n        //check if ship is sunk after registering hit. If so perform ship is sunk function on the gameboard array\r\n        if (shipAttacked.isSunk()) {\r\n          shipIsSunk(shipAttacked);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  //Change gameboard grids to sunkShipPresent is true\r\n  const shipIsSunk = (ship) => {\r\n    gameboardArray\r\n      .filter((grid) => grid.shipPresent === ship.type)\r\n      .map((grid) => (grid.sunkShipPresent = true));\r\n  };\r\n\r\n  //Check if ships are still active to continue game\r\n  const shipsStillActive = () => {\r\n    return ships.some((ship) => ship.isSunk() === false);\r\n  };\r\n\r\n  return {\r\n    gameboardArray,\r\n    shipTypes,\r\n    ships,\r\n    receiveAttack,\r\n    placeShip,\r\n    shipsStillActive,\r\n    isShipWithinBoundaries,\r\n    isShipAlreadyPresent,\r\n    randomizeShipPlacement,\r\n  };\r\n};\r\n\r\nexport default GameboardFactory;\r\n","import GameboardFactory from './GameboardFactory';\r\n\r\nconst PlayerFactory = (name) => {\r\n\r\n  //Run gameboard factory function to initialize player/cpu gameboard\r\n  const gameboard = GameboardFactory();\r\n\r\n  //Perform an attack on the opponent gameboard given coordinates as arguments\r\n  const attack = (xCoord, yCoord, cpuGameboard) => {\r\n    //check if opponent gameboard grid is attacked\r\n    if (\r\n      cpuGameboard.gameboardArray.find(\r\n        (grid) => grid.xCoord === xCoord && grid.yCoord === yCoord\r\n      ).isAttacked === false\r\n    ) {\r\n      //run gameboard method to receive attack if grid is not already attacked\r\n      cpuGameboard.receiveAttack(xCoord, yCoord);\r\n    }\r\n  };\r\n\r\n  const getRandomNumber = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n  };\r\n\r\n  const isGridAttacked = (xCoord, yCoord, gameboard) => {\r\n    const attackedGrid = gameboard.gameboardArray.find(\r\n      (grid) => grid.xCoord === xCoord && grid.yCoord === yCoord\r\n    );\r\n    return attackedGrid.isAttacked;\r\n  };\r\n\r\n  const aiAttack = (playerGameboard) => {\r\n    //Create array to store all unattacked grids\r\n    const unattackedGrids = [];\r\n    //Create array to store locations of ships that have been hit but not sunk\r\n    const damagedGrids = [];\r\n\r\n    //Populate unattackedGrids and damagedGrids arrays\r\n    playerGameboard.gameboardArray.forEach((grid) => {\r\n      if (grid.isAttacked === false) {\r\n        unattackedGrids.push(grid);\r\n      } else {\r\n        if (grid.shipPresent && grid.sunkShipPresent === false) {\r\n          damagedGrids.push(grid);\r\n        }\r\n      }\r\n    });\r\n\r\n    //initialize array to store potential ships\r\n    let potentialShipGrids = [];\r\n\r\n    //Locate grids that contain two adjacent hits and push to potentialShipGrids array\r\n\r\n    damagedGrids.forEach((damagedGrid) => {\r\n      if (\r\n        damagedGrids.some(\r\n          (grid) =>\r\n            (grid.xCoord === damagedGrid.xCoord - 1 &&\r\n              grid.yCoord === damagedGrid.yCoord) ||\r\n            (grid.xCoord === damagedGrid.xCoord + 1 &&\r\n              grid.yCoord === damagedGrid.yCoord) ||\r\n            (grid.xCoord === damagedGrid.xCoord &&\r\n              grid.yCoord === damagedGrid.yCoord - 1) ||\r\n            (grid.xCoord === damagedGrid.xCoord &&\r\n              grid.yCoord === damagedGrid.yCoord + 1)\r\n        )\r\n      ) {\r\n        potentialShipGrids.push(damagedGrid);\r\n      }\r\n    });\r\n\r\n    const possibleTargets = [];\r\n\r\n    if (potentialShipGrids.length > 0) {\r\n      const axis =\r\n        potentialShipGrids[0].xCoord === potentialShipGrids[1].xCoord\r\n          ? 'yAxis'\r\n          : 'xAxis';\r\n\r\n      if (axis === 'xAxis') {\r\n        //Check if grids are available to the left\r\n        if (potentialShipGrids[0].xCoord > 1) {\r\n          possibleTargets.push({\r\n            xCoord: potentialShipGrids[0].xCoord - 1,\r\n            yCoord: potentialShipGrids[0].yCoord,\r\n          });\r\n        }\r\n        //Check for the farthest right coordinate in sequence\r\n        let farRightCoordinate = 0;\r\n        potentialShipGrids.forEach((grid) => {\r\n          if (grid.xCoord > farRightCoordinate) {\r\n            farRightCoordinate = grid.xCoord;\r\n          }\r\n        });\r\n        //Check if grids are available to the right\r\n        if (farRightCoordinate < 10) {\r\n          possibleTargets.push({\r\n            xCoord: farRightCoordinate + 1,\r\n            yCoord: potentialShipGrids[0].yCoord,\r\n          });\r\n        }\r\n      } else if (axis === 'yAxis') {\r\n        //Check if grids are available to the top\r\n        if (potentialShipGrids[0].yCoord > 1) {\r\n          possibleTargets.push({\r\n            xCoord: potentialShipGrids[0].xCoord,\r\n            yCoord: potentialShipGrids[0].yCoord - 1,\r\n          });\r\n        }\r\n        //Check for the farthest bottom coordinate in sequence\r\n        let farBottomCoordinate = 0;\r\n        potentialShipGrids.forEach((grid) => {\r\n          if (grid.yCoord > farBottomCoordinate) {\r\n            farBottomCoordinate = grid.yCoord;\r\n          }\r\n        });\r\n        //Check if grids are available to the bottom\r\n        if (farBottomCoordinate < 10) {\r\n          possibleTargets.push({\r\n            xCoord: potentialShipGrids[0].xCoord,\r\n            yCoord: farBottomCoordinate + 1,\r\n          });\r\n        }\r\n        console.log(possibleTargets);\r\n      }\r\n    }\r\n\r\n    //filter possible targets to remove targets that have been attacked\r\n\r\n    const filteredPossibleTargets = possibleTargets.filter(\r\n      (target) =>\r\n        playerGameboard.gameboardArray.find(\r\n          (grid) =>\r\n            grid.xCoord === target.xCoord && grid.yCoord === target.yCoord\r\n        ).isAttacked !== true\r\n    );\r\n\r\n    if (filteredPossibleTargets.length > 0) {\r\n      playerGameboard.receiveAttack(\r\n        filteredPossibleTargets[0].xCoord,\r\n        filteredPossibleTargets[0].yCoord\r\n      );\r\n      return {\r\n        xCoord: filteredPossibleTargets[0].xCoord,\r\n        yCoord: filteredPossibleTargets[0].yCoord,\r\n      };\r\n    } else if (damagedGrids.length > 0) {\r\n      const soloTargetChoices = [\r\n        { xCoord: damagedGrids[0].xCoord - 1, yCoord: damagedGrids[0].yCoord },\r\n        { xCoord: damagedGrids[0].xCoord + 1, yCoord: damagedGrids[0].yCoord },\r\n        { xCoord: damagedGrids[0].xCoord, yCoord: damagedGrids[0].yCoord - 1 },\r\n        { xCoord: damagedGrids[0].xCoord, yCoord: damagedGrids[0].yCoord + 1 },\r\n      ];\r\n\r\n      const filteredSoloTargetChoices = [];\r\n\r\n      soloTargetChoices.forEach((target) => {\r\n        if (target.xCoord > 0 && target.xCoord < 11) {\r\n          if (target.yCoord > 0 && target.yCoord < 11) {\r\n            if (\r\n              playerGameboard.gameboardArray.find(\r\n                (grid) =>\r\n                  grid.xCoord === target.xCoord && grid.yCoord === target.yCoord\r\n              ).isAttacked === false\r\n            ) {\r\n              filteredSoloTargetChoices.push(target);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      let xCoord = filteredSoloTargetChoices[0].xCoord;\r\n      let yCoord = filteredSoloTargetChoices[0].yCoord;\r\n      playerGameboard.receiveAttack(xCoord, yCoord);\r\n      return { xCoord, yCoord };\r\n    } else {\r\n      let xCoord;\r\n      let yCoord;\r\n\r\n      do {\r\n        xCoord = getRandomNumber(1, 11);\r\n        yCoord = getRandomNumber(1, 11);\r\n      } while (isGridAttacked(xCoord, yCoord, playerGameboard) === true);\r\n\r\n      playerGameboard.receiveAttack(xCoord, yCoord);\r\n      return { xCoord, yCoord };\r\n    }\r\n\r\n    // console.log(potentialShipGrids);\r\n\r\n    // let xCoord;\r\n    // let yCoord;\r\n\r\n    // do {\r\n    //   xCoord = getRandomNumber(1, 11);\r\n    //   yCoord = getRandomNumber(1, 11);\r\n    // } while (isGridAttacked(xCoord, yCoord, playerGameboard) === true);\r\n\r\n    // playerGameboard.receiveAttack(xCoord, yCoord);\r\n    // return { xCoord, yCoord };\r\n  };\r\n\r\n  return {\r\n    name,\r\n    gameboard,\r\n    attack,\r\n    aiAttack,\r\n  };\r\n};\r\n\r\nexport default PlayerFactory;\r\n","import styled from 'styled-components/macro';\r\nimport { Button } from '../../GlobalStyles';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 5%;\r\n  height: 100%;\r\n\r\n  @media only screen and (min-device-width: 540px) and (max-device-width: 1024px) {\r\n  }\r\n\r\n  @media only screen and (min-device-width: 320px) and (max-device-width: 540px) {\r\n  }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  font-family: 'Cairo', sans-serif;\r\n  letter-spacing: 0.3rem;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  color: whitesmoke;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  font-family: 'Cairo', sans-serif;\r\n  font-size: 15px;\r\n  letter-spacing: 0.3rem;\r\n  /* margin: 30px 0 50px 0; */\r\n  color: white;\r\n  text-align: center;\r\n  border-radius: 0.5rem;\r\n  background: none;\r\n  box-shadow: 0 0 15px 5px transparent;\r\n  border: darkorange 1px solid;\r\n  padding: 10px 20px;\r\n  transition: all 0.3s ease-in-out;\r\n  width: 250px;\r\n\r\n  &:hover {\r\n    /* transition: box-shadow 0.3s ease-in-out; */\r\n    box-shadow: 0 0 15px 5px darkorange;\r\n    border: 1px solid darkorange;\r\n  }\r\n\r\n  &:focus {\r\n    /* transition: box-shadow 0.3s ease-in-out; */\r\n    box-shadow: 0 0 15px 5px darkorange;\r\n    border: 1px solid darkorange;\r\n    outline: none;\r\n  }\r\n`;\r\nexport const SubmitButton = styled(Button)`\r\n  &:hover {\r\n  }\r\n`;\r\n","import React, { useState, useContext } from 'react';\r\nimport PlayerFactory from '../../factories/PlayerFactory';\r\nimport { store } from '../../StateProvider';\r\nimport * as Styled from './Initialization.styles';\r\n\r\nexport const Initialization = () => {\r\n  const [name, setName] = useState('');\r\n  const { dispatch } = useContext(store);\r\n\r\n  const handleChange = (e) => {\r\n    setName(e.target.value.toUpperCase());\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    //Prevent default submit button behaviour\r\n    e.preventDefault();\r\n\r\n    //If no player name submitted, set to default\r\n    let playerName = name;\r\n    if (playerName === '') {\r\n      playerName = 'Player1';\r\n    }\r\n\r\n    //Initialize player and cpu Player Factory Functions\r\n    const player = PlayerFactory(playerName);\r\n    const cpu = PlayerFactory('CPU');\r\n\r\n    dispatch({ type: 'SET_PLAYERS', payload: { player, cpu } });\r\n    dispatch({ type: 'SET_GAMEWINDOW', payload: 'setup' });\r\n  };\r\n\r\n  return (\r\n    <Styled.Form onSubmit={handleSubmit}>\r\n      <Styled.Label htmlFor=\"name\">ENTER PLAYER NAME:</Styled.Label>\r\n      <Styled.Input\r\n        type=\"text\"\r\n        onChange={handleChange}\r\n        value={name}\r\n      ></Styled.Input>\r\n      <Styled.SubmitButton type=\"submit\">START GAME</Styled.SubmitButton>\r\n    </Styled.Form>\r\n  );\r\n};\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const ContentContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  transition: all 500ms cubic-bezier(0.33, 1, 0.68, 1);\r\n\r\n  &.css-transition--appear {\r\n    opacity: 0;\r\n    transform: scale(0);\r\n  }\r\n\r\n  &.css-transition--appear-active {\r\n  }\r\n\r\n  &.css-transition--appear-done {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--enter {\r\n    opacity: 0;\r\n    transform: scale(0);\r\n  }\r\n\r\n  &.css-transition--enter-active {\r\n  }\r\n\r\n  &.css-transition--enter-done {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--exit {\r\n  }\r\n\r\n  &.css-transition--exit-active {\r\n    opacity: 0;\r\n    transform: scale(0);\r\n  }\r\n\r\n  &.css-transition--exit-done {\r\n  }\r\n`;\r\n\r\n// export const MessageTextContainer = styled.h2`\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   /* position: relative; */\r\n// `;\r\n\r\n// export const MessageText = styled.h2`\r\n//   display: grid;\r\n//   font-family: 'Russo One', sans-serif;\r\n//   font-size: 1rem;\r\n//   letter-spacing: 0.3rem;\r\n//   color: ${(props) => (props.statusMessageColor)};\r\n//   position: absolute;\r\n//   /* transition: all 500ms ease-in-out; */\r\n\r\n//   transition: all 500ms cubic-bezier(0.16, 1, 0.3, 1);\r\n\r\n//   &.css-transition--appear {\r\n//     opacity: 0;\r\n//   }\r\n\r\n//   &.css-transition--appear-active {\r\n//     opacity: 0;\r\n//   }\r\n\r\n//   &.css-transition--appear-done {\r\n//     opacity: 1;\r\n//   }\r\n\r\n//   &.css-transition--enter {\r\n//     opacity: 0;\r\n//   }\r\n\r\n//   &.css-transition--enter-active {\r\n//     opacity: 0;\r\n//   }\r\n\r\n//   &.css-transition--enter-done {\r\n//     opacity: 1;\r\n//   }\r\n\r\n//   &.css-transition--exit {\r\n//     opacity: 1;\r\n//   }\r\n\r\n//   &.css-transition--exit-active {\r\n//     opacity: 0;\r\n//   }\r\n\r\n//   &.css-transition--exit-done {\r\n//     opacity: 0;\r\n//   }\r\n// `;\r\n","import styled from 'styled-components/macro';\r\nimport { GameboardContainer, GameboardGrid, Button } from '../../GlobalStyles';\r\n\r\n// export const ShipPlacementContainer = styled.div`\r\n//   display: grid;\r\n//   justify-items: center;\r\n// `;\r\n\r\nexport const Gameboard = styled(GameboardContainer)`\r\n  width: 40vw;\r\n  height: 40vw;\r\n  min-width: 300px;\r\n  min-height: 300px;\r\n  \r\n  \r\n/* @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\r\n  width: 95vw;\r\n  height: 95vw;\r\n} */\r\n\r\n`;\r\n\r\nexport const Grid = styled(GameboardGrid)`\r\n  cursor: ${(props) => (props.gridOccupied ? 'not-allowed' : 'pointer')};\r\n\r\n  opacity: ${(props) => (props.gridOccupied === true ? '0.5' : null)};\r\n  opacity: ${(props) => (props.gridSelected === true ? '0.1' : null)};\r\n  opacity: ${(props) =>\r\n    props.gridOccupied === true && props.gridSelected === true ? '0.5' : null};\r\n\r\n  background: ${(props) => (props.gridSelected === true ? 'white' : null)};\r\n  background: ${(props) => (props.gridOccupied === true ? '#8F8F88' : null)};\r\n  background: ${(props) =>\r\n    props.gridOccupied === true && props.gridSelected === true\r\n      ? ' #8F8F88'\r\n      : null};\r\n  transition: all 1000ms cubic-bezier(0.33, 1, 0.68, 1);\r\n\r\n  &.css-transition--appear {\r\n    transform: scale(0);\r\n  }\r\n\r\n  &.css-transition--appear-active {\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--appear-done {\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--enter {\r\n\r\n  }\r\n\r\n  &.css-transition--enter-active {\r\n    transform: rotateX(180deg);\r\n    opacity: 0;\r\n  }\r\n\r\n  &.css-transition--enter-done {\r\n  }\r\n\r\n  &.css-transition--exit {\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--exit-active {\r\n    transform: scale(0);\r\n  }\r\n\r\n  &.css-transition--exit-done {\r\n    transform: scale(0);\r\n  }\r\n`;\r\n\r\n// export const ToggleOrientationButton = styled(Button)`\r\n//   font-size: 1rem;\r\n//   color: white;\r\n//   margin: 50px 0;\r\n\r\n//   &:hover {\r\n//   }\r\n// `;\r\n\r\n// export const MessageText = styled.div`\r\n//   font-family: 'Russo One', sans-serif;\r\n//   letter-spacing: 5px;\r\n//   font-size: 1.5rem;\r\n//   color: white;\r\n// `;\r\n","import React, { useState, useContext, useEffect, useCallback } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { store } from '../../StateProvider';\r\nimport * as Styled from './ShipPlacementGameboard.styles';\r\n\r\nconst ShipPlacementGameboard = (props) => {\r\n\r\n  const { handleOnClick, handleOnTouch, handleOnMouseEnter, checkIfSelected } = props\r\n  const { state, dispatch } = useContext(store);\r\n  const playerGameboard = state.players.player.gameboard;\r\n\r\n\r\n  return (\r\n      <Styled.Gameboard>\r\n        {playerGameboard.gameboardArray.map((grid, index) => (\r\n          <CSSTransition\r\n            key={index}\r\n            appear={true}\r\n            in={grid.shipPresent !== false}\r\n            // enter={true}\r\n            timeout={300}\r\n            classNames=\"css-transition-\"\r\n          >\r\n            <Styled.Grid\r\n              key={index}\r\n              onClick={() => handleOnClick(grid)}\r\n              onTouchStart={() => handleOnTouch(grid)}\r\n              onTouchEnd={(e) => e.preventDefault()}\r\n              onMouseEnter={() => handleOnMouseEnter(grid)}\r\n              gridOccupied={grid.shipPresent !== false ? true : null}\r\n              gridSelected={checkIfSelected(grid) ? true : null}\r\n            ></Styled.Grid>\r\n          </CSSTransition>\r\n        ))}\r\n      </Styled.Gameboard>\r\n  );\r\n};\r\n\r\nexport default ShipPlacementGameboard;\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const MessageTextContainer = styled.div`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nposition: relative;\r\nwidth: 100%;\r\n`;\r\n\r\nexport const MessageText = styled.h2`\r\npadding: 10px;\r\ntext-align: center;\r\nfont-family: 'Cairo', sans-serif;\r\nfont-size: 16px;\r\nletter-spacing: 0.3rem;\r\ncolor: whitesmoke;\r\ncolor: ${(props) => (props.statusMessageColor)};\r\nposition: absolute;\r\ntransition: all 250ms cubic-bezier(0.16, 1, 0.3, 1);\r\n\r\n&.css-transition--appear {\r\n  opacity: 0;\r\n}\r\n\r\n&.css-transition--appear-active {\r\n  opacity: 0;\r\n}\r\n\r\n&.css-transition--appear-done {\r\n  opacity: 1;\r\n}\r\n\r\n&.css-transition--enter {\r\n  opacity: 0;\r\n}\r\n\r\n&.css-transition--enter-active {\r\n  opacity: 0;\r\n}\r\n\r\n&.css-transition--enter-done {\r\n  opacity: 1;\r\n}\r\n\r\n&.css-transition--exit {\r\n  opacity: 1;\r\n}\r\n\r\n&.css-transition--exit-active {\r\n  opacity: 0;\r\n}\r\n\r\n&.css-transition--exit-done {\r\n  opacity: 0;\r\n}\r\n`;\r\n","import React, { useContext } from 'react';\r\nimport * as Styled from './StatusMessage.styles';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { store } from '../../StateProvider';\r\n\r\nconst StatusMessage = () => {\r\n  const { state, dispatch } = useContext(store);\r\n\r\n  return (\r\n    <Styled.MessageTextContainer>\r\n      <TransitionGroup component={null}>\r\n        <CSSTransition\r\n          key={state.statusMessage}\r\n          timeout={250}\r\n          classNames=\"css-transition-\"\r\n        >\r\n          <Styled.MessageText statusMessageColor={state.statusMessageColor}>\r\n            {state.statusMessage}\r\n          </Styled.MessageText>\r\n        </CSSTransition>\r\n      </TransitionGroup>\r\n    </Styled.MessageTextContainer>\r\n  );\r\n};\r\n\r\nexport default StatusMessage;\r\n","import styled from 'styled-components/macro';\r\n\r\nexport const GameContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n`;\r\n\r\nexport const GameboardsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  @media only screen and (max-device-width: 720px) {\r\n  flex-direction: column;\r\n  gap: 30px;\r\n}\r\n`;\r\n\r\nexport const EnemyWatersContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  width: 35vw;\r\n  height: 35vw;\r\n\r\n  @media only screen and (max-device-width: 1200px) {\r\n  width: 45vw;\r\n  height: 45vw;\r\n}\r\n\r\n@media only screen and (max-device-width: 720px) {\r\n  width: 35vh;\r\n  height: 35vh;\r\n}\r\n`;\r\n\r\nexport const FriendlyWatersContainer = styled(EnemyWatersContainer)`\r\n`;\r\n\r\nexport const EnemyWatersHeading = styled.h2`\r\nfont-family: 'Cairo', sans-serif;\r\nfont-size: 12px;\r\nletter-spacing: 0.3rem;\r\ncolor: whitesmoke;\r\n`;\r\n\r\nexport const FriendlyWatersHeading = styled(EnemyWatersHeading)``;\r\n\r\nexport const MessageTextContainer = styled.h2`\r\n  display: flex;\r\n  justify-content: center;\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nexport const MessageText = styled.h2`\r\n  display: grid;\r\n  font-family: 'Russo One', sans-serif;\r\n  font-size: 0.8rem;\r\n  letter-spacing: 0.3rem;\r\n  color: ${(props) => (props.statusMessageColor)};\r\n  position: absolute;\r\n  /* transition: all 500ms ease-in-out; */\r\n\r\n  transition: all 500ms cubic-bezier(0.16, 1, 0.3, 1);\r\n\r\n  &.css-transition--appear {\r\n    opacity: 0;\r\n  }\r\n\r\n  &.css-transition--appear-active {\r\n    opacity: 0;\r\n  }\r\n\r\n  &.css-transition--appear-done {\r\n    opacity: 1;\r\n  }\r\n\r\n  &.css-transition--enter {\r\n    opacity: 0;\r\n  }\r\n\r\n  &.css-transition--enter-active {\r\n    opacity: 0;\r\n  }\r\n\r\n  &.css-transition--enter-done {\r\n    opacity: 1;\r\n  }\r\n\r\n  &.css-transition--exit {\r\n    opacity: 1;\r\n  }\r\n\r\n  &.css-transition--exit-active {\r\n    opacity: 0;\r\n  }\r\n\r\n  &.css-transition--exit-done {\r\n    opacity: 0;\r\n  }\r\n`;\r\n","import styled from 'styled-components/macro';\r\nimport { Button } from '../../GlobalStyles';\r\nimport { MessageTextContainer, MessageText } from './Game.styles';\r\n\r\n\r\nexport const SetupContainer = styled.div`\r\n  display: flex;\r\n  height: 100%;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n`;\r\n\r\nexport const ToggleOrientationButton = styled(Button)``;\r\n\r\nexport const SetupMessageTextContainer = styled(MessageTextContainer)``;\r\n\r\nexport const SetupMessageText = styled(MessageText)`\r\ncolor: white;\r\n`;\r\n\r\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport ShipPlacementGameboard from './ShipPlacementGameboard';\r\nimport StatusMessage from './StatusMessage';\r\nimport * as Styled from './Setup.styles';\r\nimport { store } from '../../StateProvider';\r\n\r\nconst Setup = () => {\r\n  const { state, dispatch } = useContext(store);\r\n  const playerGameboard = state.players.player.gameboard;\r\n  const cpuGameboard = state.players.cpu.gameboard;\r\n  const [orientation, setOrientation] = useState('xAxis');\r\n  const [selectedGrids, setSelectedGrids] = useState([]);\r\n  //Set Ships state to ships array\r\n  const [ships, setShips] = useState(playerGameboard.shipTypes);\r\n  //Set state for previously touched grid, for touch input devices\r\n  const [previouslyTouchedGrid, setPreviouslyTouchedGrid] = useState({\r\n    xCoord: null,\r\n    yCoord: null,\r\n  });\r\n\r\n  const isWithinBoundaries = ({ xCoord, yCoord }) => {\r\n    if (\r\n      !playerGameboard.isShipWithinBoundaries(\r\n        ships[0].type,\r\n        xCoord,\r\n        yCoord,\r\n        orientation\r\n      )\r\n    ) {\r\n      const currentState = { currentMessage: state.statusMessage, currentMessageColor: state.statusMessageColor}\r\n      dispatch({\r\n        type: 'SET_STATUS_MESSAGE',\r\n        payload: `OUT OF BOUNDS`,\r\n      });\r\n      dispatch({\r\n        type: 'SET_STATUS_MESSAGE_COLOR',\r\n        payload: `orange`,\r\n      });\r\n      setTimeout( () => {\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE',\r\n          payload: `PLACE YOUR ${ships[0].type.toUpperCase()}`,\r\n        });\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE_COLOR',\r\n          payload: 'whitesmoke',\r\n        });\r\n      },2000)\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n  \r\n  const isGridOccupied = ( {xCoord, yCoord}) => {\r\n\r\n    if (\r\n      playerGameboard.isShipAlreadyPresent(\r\n        ships[0].type,\r\n        xCoord,\r\n        yCoord,\r\n        orientation\r\n      ) === true){\r\n        const currentState = { currentMessage: state.statusMessage, currentMessageColor: state.statusMessageColor}\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE',\r\n          payload: `POSITION IS OCCUPIED`,\r\n        });\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE_COLOR',\r\n          payload: `orange`,\r\n        });\r\n        setTimeout( () => {\r\n          dispatch({\r\n            type: 'SET_STATUS_MESSAGE',\r\n            payload: `PLACE YOUR ${ships[0].type.toUpperCase()}`,\r\n          });\r\n          dispatch({\r\n            type: 'SET_STATUS_MESSAGE_COLOR',\r\n            payload: 'whitesmoke',\r\n          });\r\n        },2000)\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    \r\n  \r\n\r\n  const handleOnClick = ({ xCoord, yCoord }) => {\r\n    if (ships.length) {\r\n      //Current ship to be placed is first ship in the array\r\n      const currentShip = ships[0].type;\r\n\r\n      //Check if placed ship will be within boundaries, or if ship is already present on grids.\r\n      if (isWithinBoundaries( {xCoord, yCoord} ) === false) {\r\n        return\r\n      } else if (\r\n        // playerGameboard.isShipAlreadyPresent(\r\n        //   currentShip,\r\n        //   xCoord,\r\n        //   yCoord,\r\n        //   orientation\r\n        // )\r\n        isGridOccupied( {xCoord, yCoord} ) === true\r\n      ) {\r\n        // alert('Cells occupied by Ship');\r\n        return;\r\n      } else {\r\n        //If placement is valid, place the ship.\r\n        playerGameboard.placeShip(currentShip, xCoord, yCoord, orientation);\r\n\r\n        //Remove placed ship from the ships array\r\n        const shipsCopy = [...ships];\r\n        shipsCopy.shift();\r\n        setShips(shipsCopy);\r\n      }\r\n    }\r\n  };\r\n\r\n  //Initialize the game if all ships are correctly placed\r\n  const initializeGameStart = () => {\r\n    if (!ships.length) {\r\n      cpuGameboard.randomizeShipPlacement();\r\n      setTimeout(() => {\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE',\r\n          payload: `GAME STARTING IN 3`,\r\n        });\r\n        setTimeout(() => {\r\n          dispatch({\r\n            type: 'SET_STATUS_MESSAGE',\r\n            payload: `GAME STARTING IN 2`,\r\n          });\r\n          setTimeout(() => {\r\n            dispatch({\r\n              type: 'SET_STATUS_MESSAGE',\r\n              payload: `GAME STARTING IN 1`,\r\n            });\r\n          }, 1000);\r\n        }, 1000);\r\n      }, 0);\r\n      //Set window to game and turn to player\r\n      setTimeout(() => {\r\n        dispatch({ type: 'SET_GAMEWINDOW', payload: 'game' });\r\n        dispatch({ type: 'SET_TURN', payload: 'player' });\r\n      }, 3000);\r\n    }\r\n  };\r\n\r\n  //Handle touch input on touch screen devices\r\n  const handleOnTouch = (grid) => {\r\n    //Check if all ships are placed.\r\n    if (!ships.length) {\r\n      return;\r\n    } else {\r\n      //Check if grid was previously touched. If touched, place ship using handleOnClick function.\r\n      if (\r\n        grid.xCoord === previouslyTouchedGrid.xCoord &&\r\n        grid.yCoord === previouslyTouchedGrid.yCoord\r\n      ) {\r\n        handleOnClick(grid);\r\n      } else {\r\n        //Set selected grids based on clicked grid using setSelectedGrid function\r\n        const selectedGrids = getSelectedGrids(grid);\r\n        setSelectedGrids(selectedGrids);\r\n        setPreviouslyTouchedGrid(grid);\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE',\r\n          payload: `TAP AGIAN TO CONFIRM YOUR ${ships[0].type.toUpperCase()} POSITION`,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOnMouseEnter = (grid) => {\r\n    if (!ships.length) {\r\n      return;\r\n    } else {\r\n      const selectedGrids = getSelectedGrids(grid);\r\n      setSelectedGrids(selectedGrids);\r\n    }\r\n  };\r\n\r\n  //Get selected grids based on clicked coordinate and current ship type\r\n  const getSelectedGrids = ({ xCoord, yCoord }) => {\r\n    const currentShipLength = ships[0].length;\r\n    const selected = [];\r\n    if (orientation === 'xAxis') {\r\n      for (let i = 0; i < currentShipLength; i++) {\r\n        selected.push({ xCoord: xCoord + i, yCoord });\r\n      }\r\n    } else if (orientation === 'yAxis') {\r\n      for (let i = 0; i < currentShipLength; i++) {\r\n        selected.push({ xCoord: xCoord, yCoord: yCoord + i });\r\n      }\r\n    }\r\n    return selected;\r\n  };\r\n\r\n  //Check if grid is part of selected grids. (For on mouseover highlighting of grids)\r\n  const checkIfSelected = (grid) => {\r\n    if (\r\n      selectedGrids.some(\r\n        (selectedGrid) =>\r\n          selectedGrid.xCoord === grid.xCoord &&\r\n          selectedGrid.yCoord === grid.yCoord\r\n      )\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  //Handle orientation change\r\n  const handleChangeOrientation = () => {\r\n    let newOrientation;\r\n    if (orientation === 'xAxis') {\r\n      newOrientation = 'yAxis';\r\n    } else {\r\n      newOrientation = 'xAxis';\r\n    }\r\n    setOrientation(newOrientation);\r\n  };\r\n\r\n  //Change message or initialize game based on ship array\r\n  useEffect(() => {\r\n    if (ships.length > 0) {\r\n      dispatch({\r\n        type: 'SET_STATUS_MESSAGE',\r\n        payload: `PLACE YOUR ${ships[0].type.toUpperCase()}`,\r\n      });\r\n    } else {\r\n      initializeGameStart();\r\n    }\r\n  }, [dispatch, ships]);\r\n\r\n  //Allow spacebar to change orientation\r\n  useEffect(() => {\r\n    function handleSpacebarKeyPress(e) {\r\n      if (e.keyCode === 32) {\r\n        handleChangeOrientation();\r\n      }\r\n    }\r\n    window.addEventListener('keyup', handleSpacebarKeyPress);\r\n    return () => {\r\n      window.removeEventListener('keyup', handleSpacebarKeyPress);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Styled.SetupContainer>\r\n      <StatusMessage />\r\n      <ShipPlacementGameboard\r\n        handleOnClick={handleOnClick}\r\n        handleOnTouch={handleOnTouch}\r\n        handleOnMouseEnter={handleOnMouseEnter}\r\n        checkIfSelected={checkIfSelected}\r\n      ></ShipPlacementGameboard>\r\n      <Styled.ToggleOrientationButton onClick={() => handleChangeOrientation()}>\r\n        {orientation === 'xAxis' ? 'X-AXIS (SPACEBAR)' : 'Y-AXIS (SPACEBAR)'}\r\n      </Styled.ToggleOrientationButton>\r\n    </Styled.SetupContainer>\r\n  );\r\n};\r\n\r\nexport default Setup;\r\n","import styled from 'styled-components/macro';\r\nimport { GameboardContainer, GameboardGrid } from '../../GlobalStyles';\r\n\r\n// export const ShipPlacementContainer = styled.div`\r\n//   display: grid;\r\n//   justify-items: center;\r\n// `;\r\n\r\nexport const Gameboard = styled(GameboardContainer)`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Grid = styled(GameboardGrid)`\r\n  pointer-events: ${props => props.playerTurn ? null : 'none'};\r\n  cursor: ${(props) => (props.gridIsAttacked ? 'not-allowed' : 'crosshair')};\r\n  /* background-color: ${(props) => (props.gridOccupied ? '#8F8F88' : null)}; */\r\n  background-color: ${(props) => (props.gridMiss ? 'cornflowerblue' : null)};\r\n  background-color: ${(props) => (props.gridHit ? 'red' : null)};\r\n  background-color: ${(props) => (props.gridSunk ? 'maroon' : null)};\r\n  opacity: ${(props) =>\r\n    props.gridMiss || props.gridHit || props.gridSunk\r\n      ? '0.55'\r\n      : null};\r\n\r\n  transition: all 500ms cubic-bezier(0.33, 1, 0.68, 1);\r\n\r\n  &:hover {\r\n    opacity: ${(props) => (props.gridIsAttacked ? null : '0.5')}\r\n  }\r\n\r\n  &.css-transition--appear {\r\n    transform: scale(0);\r\n  }\r\n\r\n  &.css-transition--appear-active {\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--appear-done {\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--enter {\r\n    transform: scale(0);\r\n    opacity: 1;\r\n  }\r\n\r\n  &.css-transition--enter-active {\r\n  }\r\n\r\n  &.css-transition--enter-done {\r\n  }\r\n\r\n  &.css-transition--exit {\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--exit-active {\r\n    transform: scale(0);\r\n  }\r\n\r\n  &.css-transition--exit-done {\r\n    transform: scale(0);\r\n  }\r\n`;\r\n","import React, { useState, useContext } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { store } from '../../StateProvider';\r\nimport * as Styled from './EnemyWatersGameboard.styles';\r\n\r\nconst EnemyWatersGameboard = (props) => {\r\n  const { state, dispatch } = useContext(store);\r\n  const cpuGameboard = state.players.cpu.gameboard;\r\n\r\n  const { handleGridOnClick } = props;\r\n\r\n  return (\r\n    <Styled.Gameboard>\r\n      {cpuGameboard.gameboardArray.map((grid, index) => (\r\n        <CSSTransition\r\n          key={index}\r\n          appear={true}\r\n          in={grid.isAttacked}\r\n          // enter={true}\r\n          timeout={500}\r\n          classNames=\"css-transition-\"\r\n        >\r\n          <Styled.Grid\r\n            key={index}\r\n            gridOccupied={grid.shipPresent !== false ? true : null}\r\n            gridMiss={\r\n              grid.shipPresent === false && grid.isAttacked === true\r\n                ? true\r\n                : null\r\n            }\r\n            gridHit={\r\n              grid.shipPresent !== false && grid.isAttacked === true\r\n                ? true\r\n                : null\r\n            }\r\n            gridSunk={grid.sunkShipPresent ? true : false}\r\n            gridIsAttacked={grid.isAttacked ? true : false}\r\n            onClick={() => handleGridOnClick(grid)}\r\n            playerTurn={state.turn === 'player' ? true : false}\r\n            disabled={grid.isAttacked ? true : null}\r\n          ></Styled.Grid>\r\n        </CSSTransition>\r\n      ))}\r\n    </Styled.Gameboard>\r\n  );\r\n};\r\n\r\nexport default EnemyWatersGameboard;\r\n","import styled from 'styled-components/macro';\r\nimport { GameboardContainer, GameboardGrid } from '../../GlobalStyles';\r\n\r\n// export const ShipPlacementContainer = styled.div`\r\n//   display: grid;\r\n//   justify-items: center;\r\n// `;\r\n\r\nexport const Gameboard = styled(GameboardContainer)`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Grid = styled(GameboardGrid)`\r\n  background-color: ${(props) => (props.gridOccupied ? '#8F8F88' : null)};\r\n  background-color: ${(props) => (props.gridMiss ? 'cornflowerblue' : null)};\r\n  background-color: ${(props) => (props.gridHit ? 'red' : null)};\r\n  background-color: ${(props) => (props.gridSunk ? 'maroon' : null)};\r\n  opacity: ${(props) =>\r\n    props.gridOccupied || props.gridMiss || props.gridHit || props.gridSunk\r\n      ? '0.5'\r\n      : null};\r\n\r\n  transition: all 500ms cubic-bezier(0.33, 1, 0.68, 1);\r\n\r\n  &.css-transition--appear {\r\n    transform: scale(0);\r\n  }\r\n\r\n  &.css-transition--appear-active {\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--appear-done {\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--enter {\r\n    transform: scale(0);\r\n    background-color: ${(props) => (props.gridHit ? 'orange' : null)};\r\n    background-color: ${(props) => (props.gridMiss ? 'cornflowerblue' : null)};\r\n    opacity: 1;\r\n  }\r\n\r\n  &.css-transition--enter-active {\r\n  }\r\n\r\n  &.css-transition--enter-done {\r\n  }\r\n\r\n  &.css-transition--exit {\r\n    transform: scale(1);\r\n  }\r\n\r\n  &.css-transition--exit-active {\r\n    transform: scale(0);\r\n  }\r\n\r\n  &.css-transition--exit-done {\r\n    transform: scale(0);\r\n  }\r\n`;\r\n","import React, { useState, useContext } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { store } from '../../StateProvider';\r\nimport * as Styled from './FriendlyWatersGameboard.styles';\r\n\r\nconst FriendlyWatersGameboard = () => {\r\n  const { state, dispatch } = useContext(store);\r\n  const playerGameboard = state.players.player.gameboard;\r\n\r\n  return (\r\n    <Styled.Gameboard>\r\n      {playerGameboard.gameboardArray.map((grid, index) => (\r\n        <CSSTransition\r\n          key={index}\r\n          appear={true}\r\n          in={grid.isAttacked}\r\n          // enter={true}\r\n          timeout={500}\r\n          classNames=\"css-transition-\"\r\n        >\r\n        <Styled.Grid\r\n          key={index}\r\n          gridOccupied={grid.shipPresent !== false ? true : null}\r\n          gridMiss={\r\n            grid.shipPresent === false && grid.isAttacked === true ? true : null\r\n          }\r\n          gridHit={\r\n            grid.shipPresent !== false && grid.isAttacked === true ? true : null\r\n          }\r\n          gridSunk={grid.sunkShipPresent ? true : false}\r\n        ></Styled.Grid>\r\n        </CSSTransition>\r\n      ))}\r\n    </Styled.Gameboard>\r\n  );\r\n};\r\n\r\nexport default FriendlyWatersGameboard;","import React, { useContext, useEffect } from 'react';\r\nimport EnemyWatersGameboard from './EnemyWatersGameboard';\r\nimport FriendlyWatersGameboard from './FriendlyWatersGameboard';\r\nimport * as Styled from './Game.styles';\r\nimport { store } from '../../StateProvider';\r\nimport StatusMessage from './StatusMessage';\r\n\r\n\r\nconst Game = () => {\r\n  const { state, dispatch } = useContext(store);\r\n  const player = state.players.player;\r\n  const cpu = state.players.cpu;\r\n\r\n  const handleGridOnClick = (gridAttacked) => {\r\n    player.attack(gridAttacked.xCoord, gridAttacked.yCoord, cpu.gameboard);\r\n\r\n    const attackedGrid = cpu.gameboard.gameboardArray.find(\r\n      (grid) =>\r\n        gridAttacked.xCoord === grid.xCoord &&\r\n        gridAttacked.yCoord === grid.yCoord\r\n    );\r\n\r\n    if (attackedGrid.shipPresent) {\r\n      if (attackedGrid.sunkShipPresent) {\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE',\r\n          payload: `YOU SUNK THE ENEMY'S ${attackedGrid.shipPresent.toUpperCase()}`,\r\n        });\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE_COLOR',\r\n          payload: `darkred`,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE',\r\n          payload: `YOU HIT AN ENEMY SHIP`,\r\n        });\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE_COLOR',\r\n          payload: `orange`,\r\n        });\r\n      }\r\n      dispatch({ type: 'SET_TURN', payload: null });\r\n    } else {\r\n      dispatch({ type: 'SET_STATUS_MESSAGE', payload: `YOU MISSED` });\r\n      dispatch({ type: 'SET_TURN', payload: null });\r\n    }\r\n\r\n    // dispatch({ type: 'SET_TURN', payload: 'cpu' });\r\n    if (cpu.gameboard.shipsStillActive()) {\r\n      //ADD SET TIMEOUT BACK\r\n      setTimeout(() => {\r\n        dispatch({ type: 'SET_TURN', payload: 'cpu' });\r\n      }, 2000);\r\n    } else {\r\n      dispatch({ type: 'SET_STATUS_MESSAGE', payload: `YOU WIN` });\r\n    }\r\n  };\r\n\r\n  const handleCpuAttack = () => {\r\n    const attackedCoords = cpu.aiAttack(player.gameboard);\r\n\r\n    const attackedGrid = player.gameboard.gameboardArray.find(\r\n      (grid) =>\r\n        grid.xCoord === attackedCoords.xCoord &&\r\n        grid.yCoord === attackedCoords.yCoord\r\n    );\r\n\r\n    if (attackedGrid.shipPresent) {\r\n      if (attackedGrid.sunkShipPresent) {\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE',\r\n          payload: `CPU SUNK YOUR ${attackedGrid.shipPresent.toUpperCase()}`,\r\n        });\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE_COLOR',\r\n          payload: `darkred`,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE',\r\n          payload: `CPU HIT YOUR ${attackedGrid.shipPresent.toUpperCase()}`,\r\n        });\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE_COLOR',\r\n          payload: `orange`,\r\n        });\r\n      }\r\n    } else {\r\n      dispatch({ type: 'SET_STATUS_MESSAGE', payload: `CPU MISSED` });\r\n    }\r\n\r\n    if (player.gameboard.shipsStillActive()) {\r\n      //ADD SET TIMEOUT BACK\r\n      setTimeout(() => {\r\n        dispatch({ type: 'SET_TURN', payload: 'player' });\r\n      }, 2000);\r\n    } else {\r\n      dispatch({ type: 'SET_STATUS_MESSAGE', payload: `CPU WINS` });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (state.turn === 'cpu') {\r\n      if (cpu.gameboard.shipsStillActive()) {\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE',\r\n          payload: `CPU IS ATTACKING`,\r\n        });\r\n        dispatch({\r\n          type: 'SET_STATUS_MESSAGE_COLOR',\r\n          payload: `white`,\r\n        });\r\n        setTimeout(() => {\r\n          handleCpuAttack();\r\n          // dispatch({\r\n          //   type: 'SET_STATUS_MESSAGE',\r\n          //   payload: `${player.name}'S TURN TO ATTACK`,\r\n          // });\r\n          // dispatch({ type: 'SET_TURN', payload: 'player' });\r\n        }, 2500);\r\n      }\r\n    } else if (state.turn === 'player') {\r\n      dispatch({\r\n        type: 'SET_STATUS_MESSAGE',\r\n        payload: `${player.name.toUpperCase()}'S TURN TO ATTACK`,\r\n      });\r\n      dispatch({\r\n        type: 'SET_STATUS_MESSAGE_COLOR',\r\n        payload: `white`,\r\n      });\r\n    }\r\n  }, [state.turn]);\r\n\r\n  // useEffect(() => {\r\n  //   dispatch({\r\n  //     type: 'SET_STATUS_MESSAGE',\r\n  //     payload: `${player.name}'S TURN TO ATTACK`,\r\n  //   });\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (cpu.gameboard.shipsStillActive()) {\r\n  //     setTimeout(() => {\r\n  //       handleCpuAttack();\r\n  //     }, 2000)\r\n  //   } else {\r\n  //     dispatch({ type: 'SET_STATUS_MESSAGE', payload: `YOU WIN` });\r\n  //   }\r\n  // }[state.turn]);\r\n\r\n  return (\r\n    <Styled.GameContainer>\r\n      <StatusMessage></StatusMessage>\r\n      <Styled.GameboardsContainer>\r\n        <Styled.EnemyWatersContainer>\r\n          <EnemyWatersGameboard\r\n            handleGridOnClick={handleGridOnClick}\r\n          ></EnemyWatersGameboard>\r\n          <Styled.EnemyWatersHeading>ENEMY WATERS</Styled.EnemyWatersHeading>\r\n        </Styled.EnemyWatersContainer>\r\n        <Styled.FriendlyWatersContainer>\r\n          <FriendlyWatersGameboard></FriendlyWatersGameboard>\r\n          <Styled.FriendlyWatersHeading>\r\n            FRIENDLY WATERS\r\n          </Styled.FriendlyWatersHeading>\r\n        </Styled.FriendlyWatersContainer>\r\n      </Styled.GameboardsContainer>\r\n    </Styled.GameContainer>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useContext } from 'react';\r\nimport { store } from '../../StateProvider';\r\nimport { Initialization } from './Initialization';\r\nimport * as Styled from './ContentContainer.styles';\r\nimport Setup from './Setup';\r\nimport Game from './Game';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst ContentContainer = () => {\r\n  const { state } = useContext(store);\r\n\r\n  const renderWindow = (gameWindow) => {\r\n    if (gameWindow === 'initialization') {\r\n      return <Initialization/>;\r\n    } else if (gameWindow === 'setup') {\r\n      return <Setup/>;\r\n    } else if (gameWindow === 'game') {\r\n      return <Game/>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Styled.ContentContainer>\r\n      <TransitionGroup component={null}>\r\n        <CSSTransition\r\n          key={state.gameWindow}\r\n          appear={true}\r\n          timeout={500}\r\n          classNames=\"css-transition-\"\r\n        >\r\n          <Styled.Content>{renderWindow(state.gameWindow)}</Styled.Content>\r\n        </CSSTransition>\r\n      </TransitionGroup>\r\n    </Styled.ContentContainer>\r\n  );\r\n};\r\n\r\nexport default ContentContainer;\r\n","import React from 'react';\nimport { StateProvider } from './StateProvider';\nimport * as Styled from './App.styles';\nimport { GlobalStyles } from './GlobalStyles';\nimport Footer from './components/footer/Footer';\nimport Header from './components/header/Header';\nimport ContentContainer from './components/game_window/ContentContainer';\n\nfunction App() {\n  return (\n    <StateProvider>\n      <Styled.AppContainer className=\"App\">\n        <GlobalStyles />\n        <Header />\n        <ContentContainer />\n        <Footer />\n      </Styled.AppContainer>\n    </StateProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}